#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

// 已经痿了几天了，多少得找点题做了...洛谷刷不动，刷LeetCode算了..
// 这个题就是个多源BFS，求最大距离，问的是0到1的距离，但是反过来1到0的距离也是一样的，
// 那也就是说1作为起点，然后跑次BFS就行...

#define x first
#define y second

int dist[1010][1010];
class Solution {
public:
	typedef pair<int, int > PII;
    int maxDistance() {
    	int gLen;
    	cin >> gLen;
    	char grid[gLen][gLen];
    	for (int i = 0; i < gLen; i++) {
    		for (int j = 0; j < gLen; j++) cin >> grid[i][j];
		}
//    	int gLen = grid.size();
    	PII que[gLen * gLen + 10];
    	int qtop = 0, qback = 0;
    	//int dist[1010][1010];
    	cout << sizeof dist << endl;
    	memset(dist, -1, sizeof dist);
    	int mv[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
		for (int i = 0; i < gLen; i++) {
			for (int j = 0; j < gLen; j++) {
				if (grid[i][j] == '1') {
					que[qback++] = PII(i, j);
					dist[i][j] = 0;
				}
			}
		}
//		for (int i = 0; i < gLen; i++) {
//			for (int j = 0; j < gLen; j++) cout << dist[i][j] << ' ';
//			cout <<endl;
//		}
		if (qback == gLen * gLen || qback == 0) return -1;
		while (qtop <= qback) {
			PII now = que[qtop++];
			for (int i = 0; i < 4; i++) {
				int nx = now.x + mv[i][0], ny = now.y + mv[i][1];
				if (nx < 0 || nx >= gLen || ny < 0 || ny >= gLen) continue;
				if (dist[nx][ny] != -1) continue;
				//cout << nx << ' ' << ny << endl;
				dist[nx][ny] = dist[now.x][now.y] + 1;
//				cout << dist[nx][ny] << endl;
				que[++qback] = PII(nx, ny);
			}
		}
		int res = -1;
//		for (int i = 0; i < gLen; i++) {
//			for (int j = 0; j < gLen; j++) {
//				cout << dist[i][j] << ' ';
//			}
//			cout << endl;
//		}
			
				//res = max(res, dist[i][j]);
		return res;
    }
}; 

int main() {
	Solution s = Solution();
	s.maxDistance();
	return 0;
}
/*
000010100011010010101111011110011110001000111110001111100101
000010001010011110001011101100100001101101110010001111101010
000100001000100100011010010001100011110000001110000010101001
011011100001110111101111111000011101000010111110001000100010
100110101110101110110010111100100011100110100010111011101100
010000111110001100011110011011011011111110010010110101111111
100110010001011001111100111000001101111001010001000011101011
010110011000010000001010101111011111101001101010111110101100
000100101010011100110010011010001010100101010010101010100000
111111011110011100111001111011110100111111000011111010101101
001000001111101011101100111000101110110000110000001110000000
110010011110101011101011100000110111101001100010010110001100
101100101011110001100110101011011001100011011111010010000100
001011100000101110101100001010011101110001100011100011110000
111111000101000101010001101111110110101010111010001100110100
011000011001111101101011100100100101011110111101000011111010
110010100100100010000110001001000110000010001101010000000101
110010111001001000111000101010100001111011011101000101010101
001010001100101100100110000000010100111000001011010110111100
010100101100001010001000111110000101111110100011111000011011
000000001001100101100101111100111111111001001011101110110101
111111100110110011001111111010010011010001001010010110100000
000000101111011111101110001110111110101111100111000000110001
011001010010001010001010100001011011101010001000000111100000
000001100101010011111101000011111011011100000011111110100111
000001001110101110010010110011100001111001100111110111010001
010001101010111100111010011101010111110110000110000110011010
111110000001001110000001011010010111000010111110111010100001
110110010011010000111011110110010101111101100000001101111001
100101101011101111110001001101000011100011111111111101000101
111000110000010010110001001010001110111100100010001010000001
110111001110010110010010001101001000011101001111111100010101
101100000000001000000000011110000111111110110000001110101010
101011011000010100101011010000011111010100110011001000110101
010011010101010010101101110000001101100111000101001111111000
001111100100000001111101010001101010001111101000011100000001
011010010101001110111100100000000001100100101001010001111001
110100010000100100011110111011000100010011111011011101100110
111111100000011110100000000000100100011110010001111100000100
010000011111101110111000001010000101100111010001101011001011
111110010010110110000111100110001010111110110011000100100001
110101100011001011111111101110010000001111011100101100111010
000011010001001110100001110011101100000010110000110001010110
000011011111111110011010001001010111111011000111001100111001
101101001110101111000001010001000101110011011000001001110111
111001100011011001011110010010011100001010110000001000100111
111000010101100111001100110110111011011001101101110111001011
111000000100111001010101110111100011010010011101011111100111
101000011011111110101111011000101110111111001000010001111011
111110111110111111001101000011100011101011111110010111001100
011101110110111110011000101000011010101000111011011101011100
010010001001100110000011110010111001110101000101110001100010
001010010001010011011010100111010001000001111011000010000001
010100010110100100110111101001001000110110000111101001010001
111011000111010011100100110111001001001101101101001110010100
111101111110100000100110111100110011101011000000010011101010
001111011001110110011100001101110000100001000000011000111001
000011110011100111000001011101000110110110000101000101111110
000101011101100011001000100110000101101001100011101001001110
100100101101001110010110000011100011011010110110000010011110

*/
