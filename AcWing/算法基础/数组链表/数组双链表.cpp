#include <iostream>
using namespace std;

// 双链表在单链表的基础上进行了加强，普通的单链表一般只能单向走
// 而不能回头，而双链表的实现是利用两个指针，分别指向当前节点左边
// 的节点和右边的节点，这样就可以达到双向的效果

// 另外，双链表不仅要存放头结点，还要存放尾结点，而使用两个变量
// 维护较为麻烦，因此可以规定两个起始点一开始就是互相指的

const int N = 100010;

int e[N], l[N], r[N], idx;

// 在节点k的右边插入一个数 
// 具体过程就是要添加的节点先把左右指针指向k和k+1节点
// 再让k的右指针指向要添加的节点，让k+1节点的左指针指向要添加的节点
// 也就是说先让要添加的节点建立到k和k+1节点的关系，再让k和k+1节点指
// 回要添加的节点 
void insertVal(int k, int x) {
	e[idx] = x;
	// 先让要添加的节点的右指针指向k节点的右指针所指的节点 
	r[idx] = r[k];
	// 然后再让这个节点的左指针指向k 
	l[idx] = k;
	// 将原来k的右指针指向的节点的左指针指向当前节点 
	l[r[k]] = idx;
	// 让k的右指针指向当前节点 
	r[k] = idx;
}

// 删除节点k
void remove(int k) {
	// 删除操作同样是直接跳过中间那个点
	// 让k的右指针指向的节点的左指针指向k的左指针指向的元素 
	l[r[k]] = l[k];
	// 再让k的左指针指向的元素的右指针指向k的右指针指向的元素 
	r[l[k]] = r[k];
} 

int main() {
	// 0是左端点，1是右端点
    r[0] = 1, l[1] = 0;
    idx = 2;
    int n;
    cin >> n;
    while (n--) {
    	
	}
	return 0;
}
