1. 优化搜索顺序
	大部分情况下应该优先搜索分支较少的节点，比如求一个数的所有组成方案，如果我们先从1开始搜，
	那这个数有多大我们就要搜多少层，而如果我们先从这个数开始搜，搜索的层次就能大幅减少
2. 排除等效冗余 
	比如走迷宫问题，我们之所以用一个数组标记走过的地方，就是为了防止走过的路径重复走
3. 可行性剪枝
	也就是说当出现不合法解时停止搜索，比如走迷宫问题里的出界判断，还有某些选数问题出现负数解
	或者过大的解都是可以用可行性剪枝的
4. 最优解剪枝
	当我们已经求到一个解时，可以通过这个解与之后的解进行对比，如果这个解比后面的解更好（比如更大
	更小等）那么后续操作就可以直接剪掉了，如果这个解不是最优的，则进行更新。比如DFS求迷宫最短路径
	如果某个路径步数大于当前路径，就可以进行剪枝
5. 记忆化搜索
	这个一般都是DP的技巧，其实就是把循环改成了递归 
