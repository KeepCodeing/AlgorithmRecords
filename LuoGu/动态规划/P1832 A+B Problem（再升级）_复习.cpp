#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdio>
using namespace std;

// 背包复习第第三弹，这个题是个完全背包求方案数，思路是先把素数算出来，然后套模板 
// 温故而知新啊..看起来做以前做过的题还是很有意义的w，先CE了一次，因为没导入cstdio，然后WA了一次，因为输出格式错误
// 注意这里f的类型是长长整形，在输出的时候用的printf，然而格式符用的却是%d，比较奇怪的是这里不类似long double之类的
// 数据类型会直接出错，而是会在当前数据超过了整形范围时才会出错，也就是是如果当前数据还在整形之内，那这里lld就自动
// 被当成了整形，即可正常输出，而如果当它溢出了，编译器应该依然会进行类型转换，这时就相当于用整形存长长整形了..自然
// 就会出错
// 还有就是关于这里的状态转移方程， 不知道是哪个题带来的f[j] += f[j - 1]的印象，反正一开始就是这样写的，这个动态转移方程
// 的意思是当前状态是由上一个状态转移来的，这里的表现就是j-1，那么看下这个题，首先我们知道f[0]=1，那这里如果这样写就很容
// 易发现，这个初始值是用不到的，也就是我们算出来的方案数永远都是0，原因是当前状态不是由“上一个状态”转移而来，而是由
// “上一个可以用的素数”转移来的，不仔细想的话可以把这里认为是套01背包模板，只不过改成了计数... 

const int N = 1e3 + 10;
long long f[N];
//bool primes[N + 10];
//void getPrimes() {
//	primes[0] = primes[1] = true;
//	for (int i = 2; i <= sqrt(N); i++) {
//		if (primes[i]) continue;
//		for (int j = i * i; j <= N; j += i) {
//			primes[j] = true;
//		}
//	}
//	// 这里看了眼质数表发现57不是素数，但是又想不出来好的验证方法，所以写了个试除法求质因数的东西，发现57 = 3 * 19... 
//	int cnt = 0;
//	for (int i = 1; i <= N; i++) {
//		if (primes[i]) continue;
//		printf("%d,", i);
//		cnt++;
//	}
//	printf("%d\n", cnt);
//}
// 数据不大，所以打了个质数表
const int M = 169; 
int primes[M] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009};
int main() {
	int n;
	scanf("%d", &n); 
	int idx = lower_bound(primes, primes + M, n) - primes;
	f[0] = 1;
	for (int i = 0; i <= idx; i++) {
		for (int j = primes[i]; j <= n; j++){
			f[j] += f[j - primes[i]];
		}
	}
	// 大坑，看起来C++的输入输出不追求速度（数据范围不大）还是尽量用好了 
	printf("%lld", f[n]);
	return 0;
}

